{"version":3,"sources":["container.js","Errorboundary.js","App.js","serviceWorker.js","index.js"],"names":["Container","Lat","Long","className","id","class","Errorboundary","props","state","isError","this","setState","children","React","Component","App","latitude","longitude","fetch","then","val","json","cords","iss_position","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAWeA,G,MATG,SAAC,GAAc,IAAbC,EAAY,EAAZA,IAAIC,EAAQ,EAARA,KACvB,OACA,yBAAKC,UAAU,yBAAyBC,GAAI,aACzC,yBAAKC,MAAM,kCAAX,aAAuDJ,GACvD,yBAAKI,MAAM,iCAAX,cAAuDH,MCuB5CI,E,kDAzBd,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACZC,SAAU,GAHM,E,gEAUjBC,KAAKC,SAAS,CAACF,SAAQ,M,+BAIvB,OAAIC,KAAKF,MAAMC,QAOR,yBAAKN,UAAW,MAAhB,wEALL,6BACCO,KAAKH,MAAMK,c,GAlBYC,IAAMC,WCkCnBC,E,kDA/Bb,aAAc,IAAD,8BACX,gBACKP,MAAM,CACTQ,SAAU,GACVC,UAAW,IAJF,E,qDASN,IAAD,OAKJ,OAHFC,MAAM,2CAA2CC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UAAQF,MAAK,SAAAG,GAC1E,EAAKX,SAAS,CAACK,SAASM,EAAMC,aAAaP,SAASC,UAAUK,EAAMC,aAAaN,eAG/E,yBAAKd,UAAY,MACjB,wBAAIA,UAAU,SAAd,4BACA,wBAAIA,UAAU,SAAd,mCACA,yBAAKE,MAAQ,SACb,yBAAKA,MAAQ,SACb,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAWJ,IAAMS,KAAKF,MAAMQ,SAAUd,KAAQQ,KAAKF,MAAMS,aAEzD,yBAAKZ,MAAQ,SACb,yBAAKA,MAAQ,SACb,iCAAM,4BAAI,oDAAJ,KAAN,U,GA1BYQ,IAAMC,WCOJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c23ce601.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Container = ({Lat,Long})=>{\r\n\treturn(\r\n\t<div className='dib br4 ba bw1 pa3 ma3' id ='container'>\r\n    <div class='long dib br3 bb br bw1 ma4 pa2'>LATITUDE: {Lat}</div>\r\n    <div class='lat dib br3 bb br bw1 ma4 pa2'>LONGITUDE: {Long}</div>\r\n    </div>\r\n\t\t);\r\n}\r\n\r\nexport default Container;","import React from 'react'\r\n\r\n\r\nclass Errorboundary extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tisError : false\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\tdidComponentCatch(){\r\n\t\tthis.setState({isError:true});\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(!this.state.isError)\r\n\t\t\treturn(\r\n\t\t\t\t<div>\r\n\t\t\t\t{this.props.children}\r\n\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\telse\r\n\t\treturn(<div className ='tc'>SORRY, THERE SEEMS TO BE AN ISSUE WITH THE SERVER. PLEASE TRY LATER.</div>);\r\n\t}\r\n}\r\n\r\nexport default Errorboundary;","import React from 'react';\nimport './App.css';\nimport Container from './container.js';\nimport Errorboundary from './Errorboundary';\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state={\n      latitude: '',\n      longitude: ''\n    };\n  }\n\n\nrender(){\n\n  fetch('http://api.open-notify.org/iss-now.json').then(val=>val.json()).then(cords=> {\n    this.setState({latitude:cords.iss_position.latitude,longitude:cords.iss_position.longitude});\n  })\n    return (\n      <div className = 'tc'>\n      <h1 className='f1 tc'>Live Location Tracker Of</h1>\n      <h1 className='f1 tc'>The International Space Station</h1>\n      <div class = 'gap1'></div>\n      <div class = 'gap1'></div>   \n      <Errorboundary>\n      <Container Lat ={this.state.latitude} Long = {this.state.longitude} />\n      </Errorboundary>\n      <div class = 'gap2'></div> \n      <div class = 'gap2'></div>\n      <div> <em><strong> Made With Love </strong> </em> </div>\n      </div>\n      );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}